// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TestTask.ItemsService.Infrastructure;

#nullable disable

namespace TestTask.ItemsService.Infrastructure.Migrations
{
    [DbContext(typeof(ItemsContext))]
    [Migration("20240219192241_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TestTask.ItemsService.Domain.Entities.AttributeValues.DateAttributeValuesEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ItemId")
                        .HasColumnType("integer");

                    b.Property<int>("RefAttributeId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("Value")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("RefAttributeId");

                    b.ToTable("DateAttributeValues", (string)null);
                });

            modelBuilder.Entity("TestTask.ItemsService.Domain.Entities.AttributeValues.FloatAttributeValuesEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ItemId")
                        .HasColumnType("integer");

                    b.Property<int>("RefAttributeId")
                        .HasColumnType("integer");

                    b.Property<double?>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("RefAttributeId");

                    b.ToTable("FloatAttributeValues", (string)null);
                });

            modelBuilder.Entity("TestTask.ItemsService.Domain.Entities.AttributeValues.IntegerAttributeValuesEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ItemId")
                        .HasColumnType("integer");

                    b.Property<int>("RefAttributeId")
                        .HasColumnType("integer");

                    b.Property<int?>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("RefAttributeId");

                    b.ToTable("IntegerAttributeValues", (string)null);
                });

            modelBuilder.Entity("TestTask.ItemsService.Domain.Entities.AttributeValues.StringAttributeValuesEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ItemId")
                        .HasColumnType("integer");

                    b.Property<int>("RefAttributeId")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("RefAttributeId");

                    b.ToTable("StringAttributeValues", (string)null);
                });

            modelBuilder.Entity("TestTask.ItemsService.Domain.Entities.AttributeValues.TimeAttributeValuesEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ItemId")
                        .HasColumnType("integer");

                    b.Property<int>("RefAttributeId")
                        .HasColumnType("integer");

                    b.Property<TimeSpan?>("Value")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("RefAttributeId");

                    b.ToTable("TimeAttributeValues", (string)null);
                });

            modelBuilder.Entity("TestTask.ItemsService.Domain.Entities.CategoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("TestTask.ItemsService.Domain.Entities.ItemEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Items", (string)null);
                });

            modelBuilder.Entity("TestTask.ItemsService.Domain.Entities.RefAttributes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AttributeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<int>("DataType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId")
                        .IsUnique();

                    b.ToTable("RefAttributes", (string)null);
                });

            modelBuilder.Entity("TestTask.ItemsService.Domain.Entities.AttributeValues.DateAttributeValuesEntity", b =>
                {
                    b.HasOne("TestTask.ItemsService.Domain.Entities.ItemEntity", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TestTask.ItemsService.Domain.Entities.RefAttributes", "RefAttribute")
                        .WithMany()
                        .HasForeignKey("RefAttributeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("RefAttribute");
                });

            modelBuilder.Entity("TestTask.ItemsService.Domain.Entities.AttributeValues.FloatAttributeValuesEntity", b =>
                {
                    b.HasOne("TestTask.ItemsService.Domain.Entities.ItemEntity", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TestTask.ItemsService.Domain.Entities.RefAttributes", "RefAttribute")
                        .WithMany()
                        .HasForeignKey("RefAttributeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("RefAttribute");
                });

            modelBuilder.Entity("TestTask.ItemsService.Domain.Entities.AttributeValues.IntegerAttributeValuesEntity", b =>
                {
                    b.HasOne("TestTask.ItemsService.Domain.Entities.ItemEntity", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TestTask.ItemsService.Domain.Entities.RefAttributes", "RefAttribute")
                        .WithMany()
                        .HasForeignKey("RefAttributeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("RefAttribute");
                });

            modelBuilder.Entity("TestTask.ItemsService.Domain.Entities.AttributeValues.StringAttributeValuesEntity", b =>
                {
                    b.HasOne("TestTask.ItemsService.Domain.Entities.ItemEntity", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TestTask.ItemsService.Domain.Entities.RefAttributes", "RefAttribute")
                        .WithMany()
                        .HasForeignKey("RefAttributeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("RefAttribute");
                });

            modelBuilder.Entity("TestTask.ItemsService.Domain.Entities.AttributeValues.TimeAttributeValuesEntity", b =>
                {
                    b.HasOne("TestTask.ItemsService.Domain.Entities.ItemEntity", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TestTask.ItemsService.Domain.Entities.RefAttributes", "RefAttribute")
                        .WithMany()
                        .HasForeignKey("RefAttributeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("RefAttribute");
                });

            modelBuilder.Entity("TestTask.ItemsService.Domain.Entities.ItemEntity", b =>
                {
                    b.HasOne("TestTask.ItemsService.Domain.Entities.CategoryEntity", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("TestTask.ItemsService.Domain.Entities.RefAttributes", b =>
                {
                    b.HasOne("TestTask.ItemsService.Domain.Entities.CategoryEntity", "Category")
                        .WithOne()
                        .HasForeignKey("TestTask.ItemsService.Domain.Entities.RefAttributes", "CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Category");
                });
#pragma warning restore 612, 618
        }
    }
}
